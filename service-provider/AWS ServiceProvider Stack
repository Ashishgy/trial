AWSTemplateFormatVersion: 2010-09-09
Description: >-
  [xLab Spring 2024 Data Sharing architecture] Stack for an entire service provider architecture. Represents the resources of a single service provider.
Parameters:
  SPUniqueIdSuffix:
    Type: String
    Default: _sp1
    Description: The unique suffix to append to resources of this stack. (E.g. _sp1 could be for ServiceProvider 1, _sp2 for ServiceProvider 2, etc.)
  VpcId:
    Type: String
    Default: vpc-00c285045369b86f0
    Description: The VPC that the service is running inside of
  ECSTaskExecutionRoleArn:
    Type: String
    Default: 'arn:aws:iam::429105560611:role/BensECSTaskExecutionRole'
    Description: The role used to start up an ECS task
  CapacityProvider:
    Type: String
    Default: FARGATE
    Description: >-
      The cluster capacity provider that the service should use to request
      capacity when it wants to start up a task
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
Resources:
  # Service Discovery namespace for internal service hostname mapping:
  DiscoveryNamespace:
    Type: 'AWS::ServiceDiscovery::PrivateDnsNamespace'
    Properties:
      Name: !Sub 'sp-services${SPUniqueIdSuffix}'
      Description: SP CloudMap namespace
      Vpc: !Ref VpcId
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8aaa28be-8007-4c88-9959-c15a3070e972


  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'sp${SPUniqueIdSuffix}'
  

  MyECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - subnet-0f069571b9e806b6e
        - subnet-06b86ae67399c073b
      SecurityGroups:
        - !GetAtt 
          - ServiceSecurityGroup
          - GroupId

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: MyECSLoadBalancer
    Properties:
      Protocol: HTTP
      Port: 5000
      VpcId: !Ref VpcId
      TargetType: ip # Needed to be compatible with awsvpc network mode.
      HealthCheckEnabled: true
      HealthCheckPort: 5000
      HealthCheckProtocol: 'HTTP'
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 100
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      Matcher:
        HttpCode: '200,404'

  FrontendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
      LoadBalancerArn: !Ref MyECSLoadBalancer
      Port: 5000
      Protocol: HTTP


  # BackendTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Protocol: HTTP
  #     Port: 8000
  #     VpcId: !Ref VpcId
  #     TargetType: ip
  #     HealthCheckEnabled: true
  #     HealthCheckPort: 8000
  #     HealthCheckProtocol: 'HTTP'
  #     HealthCheckPath: /
  #     HealthCheckIntervalSeconds: 100
  #     HealthCheckTimeoutSeconds: 10
  #     HealthyThresholdCount: 2
  #     UnhealthyThresholdCount: 10
  #     Matcher:
  #       HttpCode: '200,404'

  # BackendListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref BackendTargetGroup
  #     LoadBalancerArn: !Ref MyECSLoadBalancer
  #     Port: 8000
  #     Protocol: HTTP


  ServControllerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: MyECSLoadBalancer
    Properties:
      Protocol: HTTP
      Port: 9081
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPort: 9081
      HealthCheckProtocol: 'HTTP'
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 100
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      Matcher:
        HttpCode: '200,404'

  ServControllerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ServControllerTargetGroup
      LoadBalancerArn: !Ref MyECSLoadBalancer
      Port: 9081
      Protocol: HTTP


  AcapyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: MyECSLoadBalancer
    Properties:
      Protocol: HTTP
      Port: 8020
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPort: 8020
      HealthCheckProtocol: 'HTTP'
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 100
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      Matcher:
        HttpCode: '200,404,302'

  AcapyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AcapyTargetGroup
      LoadBalancerArn: !Ref MyECSLoadBalancer
      Port: 8020
      Protocol: HTTP

  AcapyAdminTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: MyECSLoadBalancer
    Properties:
      Protocol: HTTP
      Port: 8021
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPort: 8021
      HealthCheckProtocol: 'HTTP'
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 100
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      Matcher:
        HttpCode: '200,404,302'

  AcapyAdminListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AcapyAdminTargetGroup
      LoadBalancerArn: !Ref MyECSLoadBalancer
      Port: 8021
      Protocol: HTTP

    
  FLServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: MyECSLoadBalancer
    Properties:
      Protocol: HTTP
      Port: 4500
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPort: 4500
      HealthCheckProtocol: 'HTTP'
      HealthCheckPath: /health-check # This is not just "/" because currently a GET request to the root actually executes the training.
      HealthCheckIntervalSeconds: 100
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      Matcher:
        HttpCode: '200,404'

  FLServerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FLServerTargetGroup
      LoadBalancerArn: !Ref MyECSLoadBalancer
      Port: 4500
      Protocol: HTTP


  MyDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z03918361D2L2J3Y59M9N # sharetrace.us hosted zone.
      Name: !Sub 'sp${SPUniqueIdSuffix}.sharetrace.us'
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt MyECSLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt MyECSLoadBalancer.DNSName



  # Acapy:
  AcapyDiscoveryService:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: acapy
      Description: ''
      NamespaceId: !Ref DiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
  AcapyService:
    Type: 'AWS::ECS::Service'
    DependsOn: AcapyDbService
    Properties:
      ServiceName: Acapy
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref CapacityProvider
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt 
              - ServiceSecurityGroup
              - GroupId
          Subnets:
            - subnet-0f069571b9e806b6e
            - subnet-06b86ae67399c073b
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref AcapyTaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt 
            - AcapyDiscoveryService
            - Arn
      LoadBalancers:
        - ContainerName: Acapy
          ContainerPort: 8020
          TargetGroupArn: !Ref AcapyTargetGroup
        - ContainerName: Acapy
          ContainerPort: 8021
          TargetGroupArn: !Ref AcapyAdminTargetGroup
  AcapyTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: Acapy
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRoleArn
      ContainerDefinitions:
        - Name: Acapy
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: '429105560611.dkr.ecr.us-east-1.amazonaws.com/sp-acapy'
          PortMappings:
            - ContainerPort: '8020'
              HostPort: '8020'
            - ContainerPort: '8021'
              HostPort: '8021'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: WALLET_STORAGE_CONFIG
              Value: !Sub '{"url":"acapy-agent-db.sp-services${SPUniqueIdSuffix}:5432","max_connections":5, "wallet_scheme":"DatabasePerWallet"}'
            - Name: ENDPOINT_URL
              Value: !Sub 'http://sp${SPUniqueIdSuffix}.sharetrace.us:8020'
            - Name: WEBHOOK_URL
              Value: !Sub 'http://serv-controller.sp-services${SPUniqueIdSuffix}:9081/webhook'

  
  # Acapy Db:
  AcapyDbDiscoveryService:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: acapy-agent-db
      Description: ''
      NamespaceId: !Ref DiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
  AcapyDbService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: AcapyDb
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref CapacityProvider
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt 
              - ServiceSecurityGroup
              - GroupId
          Subnets:
            - subnet-0f069571b9e806b6e
            - subnet-06b86ae67399c073b
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref AcapyDbTaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt 
            - AcapyDbDiscoveryService
            - Arn
  AcapyDbTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: AcapyDb
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRoleArn
      ContainerDefinitions:
        - Name: AcapyDb
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: 'public.ecr.aws/docker/library/postgres:latest'
          PortMappings:
            - ContainerPort: '5432'
              HostPort: '5432'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: POSTGRES_USER
              Value: testuser
            - Name: POSTGRES_PASSWORD
              Value: testpassword


  # SP Controller:
  ServControllerDiscoveryService:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: serv-controller
      Description: ''
      NamespaceId: !Ref DiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
  ServControllerService:
    Type: 'AWS::ECS::Service'
    DependsOn: ServControllerDbService
    Properties:
      ServiceName: ServController
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref CapacityProvider
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt 
              - ServiceSecurityGroup
              - GroupId
          Subnets:
            - subnet-0f069571b9e806b6e
            - subnet-06b86ae67399c073b
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref ServControllerTaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt 
            - ServControllerDiscoveryService
            - Arn
      LoadBalancers:
        - ContainerName: ServController
          ContainerPort: 9081
          TargetGroupArn: !Ref ServControllerTargetGroup
  ServControllerTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: ServController
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRoleArn
      ContainerDefinitions:
        - Name: ServController
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: '429105560611.dkr.ecr.us-east-1.amazonaws.com/serv-controller'
          PortMappings:
            - ContainerPort: '9081'
              HostPort: '9081'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: AGENT_URL
              Value: !Sub "http://acapy.sp-services${SPUniqueIdSuffix}:8021"
            - Name: MONGO_DB_URI
              Value: !Sub "mongodb://serv-controller-db.sp-services${SPUniqueIdSuffix}:27017"
            

  # # SP Backend:
  # BackendDiscoveryService:
  #   Type: 'AWS::ServiceDiscovery::Service'
  #   Properties:
  #     Name: backend
  #     Description: ''
  #     NamespaceId: !Ref DiscoveryNamespace
  #     DnsConfig:
  #       DnsRecords:
  #         - TTL: 60
  #           Type: A
  #       RoutingPolicy: MULTIVALUE
  # BackendService:
  #   Type: 'AWS::ECS::Service'
  #   DependsOn: BackendDbService
  #   Properties:
  #     ServiceName: Backend
  #     Cluster: !Ref ECSCluster
  #     CapacityProviderStrategy:
  #       - Base: 0
  #         CapacityProvider: !Ref CapacityProvider
  #         Weight: 1
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: ENABLED
  #         SecurityGroups:
  #           - !GetAtt 
  #             - ServiceSecurityGroup
  #             - GroupId
  #         Subnets:
  #           - subnet-0f069571b9e806b6e
  #           - subnet-06b86ae67399c073b
  #     DeploymentConfiguration:
  #       MaximumPercent: 200
  #       MinimumHealthyPercent: 75
  #     DesiredCount: !Ref DesiredCount
  #     TaskDefinition: !Ref BackendTaskDefinition
  #     ServiceRegistries:
  #       - RegistryArn: !GetAtt 
  #           - BackendDiscoveryService
  #           - Arn
  #     LoadBalancers:
  #       - ContainerName: Backend
  #         ContainerPort: 8000
  #         TargetGroupArn: !Ref BackendTargetGroup
  # BackendTaskDefinition:
  #   Type: 'AWS::ECS::TaskDefinition'
  #   Properties:
  #     Family: Backend
  #     Cpu: !Ref ContainerCpu
  #     Memory: !Ref ContainerMemory
  #     NetworkMode: awsvpc
  #     RequiresCompatibilities:
  #       - FARGATE
  #     ExecutionRoleArn: !Ref ECSTaskExecutionRoleArn
  #     ContainerDefinitions:
  #       - Name: Backend
  #         Cpu: !Ref ContainerCpu
  #         Memory: !Ref ContainerMemory
  #         Image: '429105560611.dkr.ecr.us-east-1.amazonaws.com/sp-backend'
  #         PortMappings:
  #           - ContainerPort: '8000'
  #             HostPort: '8000'
  #         LogConfiguration:
  #           LogDriver: awslogs
  #           Options:
  #             awslogs-group: !Ref LogGroup
  #             awslogs-region: !Ref 'AWS::Region'
  #             awslogs-stream-prefix: ecs
  #         Environment:
  #           - Name: DB_NAME
  #             Value: postgres
  #           - Name: DB_USER
  #             Value: testuser
  #           - Name: DB_PASSWORD
  #             Value: testpassword
  #           - Name: DB_HOST
  #             Value: !Sub 'backend-db.sp-services${SPUniqueIdSuffix}'
  #           - Name: DB_PORT
  #             Value: 5432


  # Frontend Dashboard:
  FrontendService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: Frontend
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref CapacityProvider
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt 
              - ServiceSecurityGroup
              - GroupId
          Subnets:
            - subnet-0f069571b9e806b6e
            - subnet-06b86ae67399c073b
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref FrontendTaskDefinition
      LoadBalancers:
        - ContainerName: Frontend
          ContainerPort: 5000
          TargetGroupArn: !Ref FrontendTargetGroup
  FrontendTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: Frontend
      Cpu: 1024 # Needed increased resources to run.
      Memory: 8192
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRoleArn
      ContainerDefinitions:
        - Name: Frontend
          Cpu: 1024
          Memory: 8192
          Image: '429105560611.dkr.ecr.us-east-1.amazonaws.com/sp-frontend'
          PortMappings:
            - ContainerPort: '5000'
              HostPort: '5000'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: REACT_APP_BACKEND_BASE_URL
              Value: !Sub "http://sp${SPUniqueIdSuffix}.sharetrace.us:9081"
            - Name: PORT
              Value: 5000


  # SP Controller Db:
  ServControllerDbDiscoveryService:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: serv-controller-db
      Description: ''
      NamespaceId: !Ref DiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
  ServControllerDbService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: ServControllerDb
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref CapacityProvider
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt 
              - ServiceSecurityGroup
              - GroupId
          Subnets:
            - subnet-0f069571b9e806b6e
            - subnet-06b86ae67399c073b
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref ServControllerDbTaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt 
            - ServControllerDbDiscoveryService
            - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8328c0a8-55db-4c3b-b45b-a472a3edd56b
  ServControllerDbTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: ServControllerDb
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRoleArn
      ContainerDefinitions:
        - Name: ServControllerDb
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: 'public.ecr.aws/docker/library/mongo:latest'
          PortMappings:
            - ContainerPort: '27017'
              HostPort: '27017'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 57f17668-aadd-4660-a549-11aad3ca57d6
  

  ServiceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f269a217-79fb-4eae-8208-a4deec7a228f
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 4ca1613b-f583-46f3-9026-7128a35ad298



  # FL Server:
  FLServerDiscoveryService:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: fl-server
      Description: ''
      NamespaceId: !Ref DiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
  FLServerService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: FLServer
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref CapacityProvider
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt 
              - ServiceSecurityGroup
              - GroupId
          Subnets:
            - subnet-0f069571b9e806b6e
            - subnet-06b86ae67399c073b
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref FLServerTaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt 
            - FLServerDiscoveryService
            - Arn
      LoadBalancers:
        - ContainerName: FLServer
          ContainerPort: 4500
          TargetGroupArn: !Ref FLServerTargetGroup
  FLServerTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: FLServer
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRoleArn
      ContainerDefinitions:
        - Name: FLServer
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: '429105560611.dkr.ecr.us-east-1.amazonaws.com/fl-server'
          PortMappings:
            - ContainerPort: '4500'
              HostPort: '4500'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs



Metadata:
  'AWS::CloudFormation::Designer':
    4ca1613b-f583-46f3-9026-7128a35ad298:
      size:
        width: 150
        height: 150
      position:
        x: 240
        'y': 30
      z: 1
      embeds: []
    f269a217-79fb-4eae-8208-a4deec7a228f:
      size:
        width: 60
        height: 60
      position:
        x: 90
        'y': 360
      z: 1
      embeds: []
    8328c0a8-55db-4c3b-b45b-a472a3edd56b:
      size:
        width: 60
        height: 60
      position:
        x: 90
        'y': 240
      z: 1
      embeds: []
      dependson:
        - 0abf6704-018b-4a45-a0b2-3e354858f886
    57f17668-aadd-4660-a549-11aad3ca57d6:
      size:
        width: 60
        height: 60
      position:
        x: 90
        'y': 150
      z: 1
      embeds: []
    8aaa28be-8007-4c88-9959-c15a3070e972:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 90
      z: 1
      embeds: []
    481fc6fe-058b-4b07-adcb-fdd16facf14d:
      size:
        width: 60
        height: 60
      position:
        x: 550
        'y': 190
      z: 1
      embeds: []
    7a15927c-ff26-44aa-bb6b-7496f761f041:
      size:
        width: 60
        height: 60
      position:
        x: 260
        'y': 270
      z: 1
      embeds: []
